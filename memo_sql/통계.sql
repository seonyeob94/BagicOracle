
--상품별 월별 결제 구독수
SELECT
  TO_CHAR(P.PAY_DATE, 'YYYY.MM') AS MONTH,
  S.SUB_NAME,
  COUNT(*) AS NEW_SUBSCRIBER_COUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN PAYMENT P ON P.MS_ID = MS.MS_ID
JOIN SUBSCRIBE S ON S.SUB_ID= MS.SUB_ID
JOIN MEMBER M ON M.MEM_ID = MS.MEM_ID
WHERE   P.PAY_DATE BETWEEN TRUNC(SYSDATE, 'YY') 
                    AND LAST_DAY(SYSDATE)
AND     M.MEM_GEN = 'G11001' 
GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM'),
         S.SUB_NAME
ORDER BY MONTH;


--상품별 일별 결제 구독수
SELECT
  TO_CHAR(P.PAY_DATE, 'YYYY.MM.DD') AS DATES,
  S.SUB_NAME,
  COUNT(*) AS NEW_SUBSCRIBER_COUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN PAYMENT P ON P.MS_ID = MS.MS_ID
JOIN SUBSCRIBE S ON S.SUB_ID= MS.SUB_ID
JOIN MEMBER M ON M.MEM_ID = MS.MEM_ID
WHERE   P.PAY_DATE BETWEEN TRUNC(SYSDATE, 'MM') 
                    AND LAST_DAY(SYSDATE)
AND     M.MEM_GEN = 'G11001'
GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM.DD'),
         S.SUB_NAME
ORDER BY DATES;


--상품별 기간별 결제 구독수
SELECT
  TO_CHAR(P.PAY_DATE, 'YYYY.MM.DD') AS DATES,
  S.SUB_NAME,
  COUNT(*) AS NEW_SUBSCRIBER_COUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN PAYMENT P ON P.MS_ID = MS.MS_ID
JOIN SUBSCRIBE S ON S.SUB_ID= MS.SUB_ID
JOIN MEMBER M ON M.MEM_ID = MS.MEM_ID
WHERE   P.PAY_DATE BETWEEN TO_DATE('2025-07-01', 'YYYY-MM-DD') 
                       AND TO_DATE('2025-08-13', 'YYYY-MM-DD') 
AND     M.MEM_GEN = 'G11001' 
GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM.DD'),
         S.SUB_NAME
ORDER BY DATES;


-- 월별 가장 많은 구독을 한 상품
SELECT *
FROM (
    SELECT
        TO_CHAR(P.PAY_DATE, 'YYYY.MM') AS MONTH,
        S.SUB_NAME,
        COUNT(*) AS SUB_COUNT,
        ROW_NUMBER() OVER (
            PARTITION BY TO_CHAR(P.PAY_DATE, 'YYYY.MM')
            ORDER BY COUNT(*) DESC
        ) AS RNK
    FROM MEMBER_SUBSCRIPTION MS
    JOIN PAYMENT P ON P.MS_ID = MS.MS_ID
    JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
    GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM'), S.SUB_NAME
)
WHERE RNK = 1
ORDER BY MONTH;



-- 일별 가장 많은 구독을 한 상품
SELECT *
FROM (
    SELECT
        TO_CHAR(P.PAY_DATE, 'YYYY.MM.DD') AS DAYS,
        S.SUB_NAME,
        COUNT(*) AS SUB_COUNT,
        ROW_NUMBER() OVER (
            PARTITION BY TO_CHAR(P.PAY_DATE, 'YYYY.MM.DD')
            ORDER BY COUNT(*) DESC
        ) AS RNK
    FROM MEMBER_SUBSCRIPTION MS
    JOIN PAYMENT P ON P.MS_ID = MS.MS_ID
    JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
    GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM.DD'), S.SUB_NAME
)
WHERE RNK = 1
ORDER BY DAYS;



-- 일별 총구독자 수
SELECT
  TO_CHAR(P.PAY_DATE, 'YYYY.MM.DD') AS DATES,
  S.SUB_NAME,
  COUNT(*) AS SUBSCRIBE_COUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN PAYMENT P ON P.MS_ID = MS.MS_ID
JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
JOIN MEMBER M ON M.MEM_ID = MS.MEM_ID
WHERE   P.PAY_DATE BETWEEN TRUNC(SYSDATE, 'MM') 
                    AND LAST_DAY(SYSDATE)
AND     M.MEM_GEN = 'G11001'
GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM.DD'), S.SUB_NAME
ORDER BY DATES, SUBSCRIBE_COUNT DESC;


---- 월별 총구독자 수
SELECT
  TO_CHAR(P.PAY_DATE, 'YYYY.MM') AS MONTH,
  COUNT(*) AS NEW_SUBSCRIBER_COUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN PAYMENT P ON P.MS_ID = MS.MS_ID
WHERE P.PAY_DATE BETWEEN TRUNC(SYSDATE, 'YYYY') 
                  AND LAST_DAY(SYSDATE)
GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM')
ORDER BY MONTH;


-- 월별 총 결제금
SELECT
  TO_CHAR(PAY_DATE, 'YYYY.MM') AS MONTH,
  SUM(PAY_AMOUNT) AS TOTAL_AMOUNT
FROM
  PAYMENT
WHERE PAY_DATE BETWEEN TRUNC(SYSDATE, 'YYYY') 
                AND LAST_DAY(SYSDATE)
GROUP BY
  TO_CHAR(PAY_DATE, 'YYYY.MM')
ORDER BY
  MONTH;
  
  -- 일별 총 결제금
SELECT
  TO_CHAR(PAY_DATE, 'YYYY.MM.DD') AS DAYS,
  SUM(PAY_AMOUNT) AS TOTAL_AMOUNT
FROM
  PAYMENT
WHERE PAY_DATE BETWEEN TRUNC(SYSDATE, 'MM') 
AND   LAST_DAY(SYSDATE)
GROUP BY
  TO_CHAR(PAY_DATE, 'YYYY.MM.DD')
ORDER BY
  DAYS;
  
  
-- 월별 신규 구독자 수
SELECT
  TO_CHAR(P.PAY_DATE, 'YYYY.MM') AS MONTH,
  COUNT(*) AS NEW_PAYING_USERS
FROM PAYMENT P
WHERE P.PAY_DATE = (
  SELECT MIN(P2.PAY_DATE)
  FROM PAYMENT P2
  JOIN MEMBER_SUBSCRIPTION MS2 ON P2.MS_ID = MS2.MS_ID
  WHERE MS2.MEM_ID = (
    SELECT MS3.MEM_ID
    FROM MEMBER_SUBSCRIPTION MS3
    WHERE MS3.MS_ID = P.MS_ID
  )
)
AND P.PAY_DATE BETWEEN TRUNC(SYSDATE, 'YYYY') 
                    AND LAST_DAY(SYSDATE)
GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM')
ORDER BY MONTH;

--월별 신규 가입결제
SELECT
  TO_CHAR(P.PAY_DATE, 'YYYY.MM') AS MONTH,
  SUM(P.PAY_AMOUNT) AS NEW_SUBSCRIB_PAY
FROM PAYMENT P
WHERE P.PAY_DATE = (
  SELECT MIN(P2.PAY_DATE)
  FROM PAYMENT P2
  JOIN MEMBER_SUBSCRIPTION MS2 ON P2.MS_ID = MS2.MS_ID
  WHERE MS2.MEM_ID = (
    SELECT MS3.MEM_ID
    FROM MEMBER_SUBSCRIPTION MS3
    WHERE MS3.MS_ID = P.MS_ID
  )
)
AND P.PAY_DATE BETWEEN TRUNC(SYSDATE, 'YYYY') 
                    AND LAST_DAY(SYSDATE)
GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM')
ORDER BY MONTH;
  

--월별 취소 구독자 수
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  COUNT(*) AS CANCEL_COUNT
FROM MEMBER_SUBSCRIPTION MS
WHERE SUB_STATUS = 'N'
AND NOT EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
)
AND MS.SUB_END_DT BETWEEN TRUNC(SYSDATE, 'YYYY') 
                   AND LAST_DAY(SYSDATE)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;



--월별 취소 금액
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  SUM(S.SUB_PRICE) AS CANCEL_AMOUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
WHERE SUB_STATUS = 'N'
AND NOT EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
)
AND MS.SUB_END_DT BETWEEN TRUNC(SYSDATE, 'YYYY') 
                   AND LAST_DAY(SYSDATE)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;

--월별 구독 변화수
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  COUNT(*) AS CANCEL_COUNT
FROM MEMBER_SUBSCRIPTION MS
WHERE SUB_STATUS = 'N'
AND EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;

--월별 업그레이드 수
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  COUNT(*) AS UPGRAD_COUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
WHERE SUB_STATUS = 'N'
AND EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
    AND S2.SUB_PRICE>S.SUB_PRICE
)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;



--월별 업그레이드 결제금액

SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  SUM(S2.SUB_PRICE - S1.SUB_PRICE) AS UPGRADE_AMOUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN SUBSCRIBE S1 ON S1.SUB_ID = MS.SUB_ID
JOIN MEMBER_SUBSCRIPTION MS2
  ON MS.CUSTOMER_UID = MS2.CUSTOMER_UID
  AND MS2.SUB_STATUS = 'Y'
  AND MS2.SUB_START_DT = MS.SUB_START_DT
  AND MS2.MS_ID > MS.MS_ID
JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
WHERE MS.SUB_STATUS = 'N'
  AND S2.SUB_PRICE > S1.SUB_PRICE
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;


--월별 다운그레이드 수
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  COUNT(*) AS DOWNGRAD_COUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
WHERE SUB_STATUS = 'N'
AND EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
    AND S2.SUB_PRICE<S.SUB_PRICE
)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;

--월별 다운레이드 결제금액

SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  SUM(S1.SUB_PRICE - S2.SUB_PRICE) AS DOWNGRAD_AMOUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN SUBSCRIBE S1 ON S1.SUB_ID = MS.SUB_ID
JOIN MEMBER_SUBSCRIPTION MS2
  ON MS.CUSTOMER_UID = MS2.CUSTOMER_UID
  AND MS2.SUB_STATUS = 'Y'
  AND MS2.SUB_START_DT = MS.SUB_START_DT
  AND MS2.MS_ID > MS.MS_ID
JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
WHERE MS.SUB_STATUS = 'N'
  AND S2.SUB_PRICE < S1.SUB_PRICE
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;


--월별 총이득 금액과 총손실금액 그리고 총 구독금액
SELECT
    M.STAT_MONTH AS "통계_월",

    -- 총 이득 금액 = 신규 결제 금액 + 업그레이드 순증가액
    NVL(NewUserRevenue.NEW_SUBSCRIB_PAY, 0) +
    NVL(UpgradeRevenue.UPGRADE_AMOUNT, 0) AS "신규_및_업그레이드_금액",

    -- 총 손실 금액 = 순수 취소 금액 + 다운그레이드 순감소액
    NVL(ChurnAmount.CANCEL_AMOUNT, 0) +
    NVL(DowngradeAmount.DOWNGRADE_AMOUNT, 0) AS "취소_및_다운그레이드_금액",
    
    -- 총 구독 금액
    NVL(TotalAmount.TOTAL_AMOUNT, 0) AS "총_구독_금액"
FROM (
    -- 1. 통계용 기준 월 목록
    SELECT DISTINCT TO_CHAR(DT, 'YYYY.MM') AS STAT_MONTH
    FROM (
        SELECT PAY_DATE AS DT FROM PAYMENT
        WHERE  PAY_DATE BETWEEN TRUNC(SYSDATE, 'YYYY') 
                       AND LAST_DAY(SYSDATE)
        UNION
        SELECT SUB_END_DT AS DT FROM MEMBER_SUBSCRIPTION
        WHERE  SUB_END_DT BETWEEN TRUNC(SYSDATE, 'YYYY') 
                           AND LAST_DAY(SYSDATE)
    )
) M

-- 2. 신규 구독 결제 금액
LEFT JOIN (
    SELECT
        TO_CHAR(P.PAY_DATE, 'YYYY.MM') AS MONTH,
        SUM(P.PAY_AMOUNT) AS NEW_SUBSCRIB_PAY
    FROM PAYMENT P
    JOIN MEMBER_SUBSCRIPTION MS ON MS.MS_ID = P.MS_ID
    WHERE P.PAY_DATE = (
        SELECT MIN(P2.PAY_DATE)
        FROM PAYMENT P2
        JOIN MEMBER_SUBSCRIPTION MS2 ON MS2.MS_ID = P2.MS_ID
        WHERE MS2.MEM_ID = MS.MEM_ID
    )
    GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM')
) NewUserRevenue ON M.STAT_MONTH = NewUserRevenue.MONTH

-- 3. 업그레이드 결제 증가액
LEFT JOIN (
    SELECT
        TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
        SUM(S2.SUB_PRICE - S1.SUB_PRICE) AS UPGRADE_AMOUNT
    FROM MEMBER_SUBSCRIPTION MS
    JOIN SUBSCRIBE S1 ON S1.SUB_ID = MS.SUB_ID
    JOIN MEMBER_SUBSCRIPTION MS2 ON
        MS.CUSTOMER_UID = MS2.CUSTOMER_UID AND
        MS2.SUB_STATUS = 'Y' AND
        MS2.SUB_START_DT = MS.SUB_START_DT AND
        MS2.MS_ID > MS.MS_ID
    JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
    WHERE MS.SUB_STATUS = 'N' AND
          S2.SUB_PRICE > S1.SUB_PRICE
    GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
) UpgradeRevenue ON M.STAT_MONTH = UpgradeRevenue.MONTH

-- 4. 순수 취소 금액
LEFT JOIN (
    SELECT
        TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
        SUM(S.SUB_PRICE) AS CANCEL_AMOUNT
    FROM MEMBER_SUBSCRIPTION MS
    JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
    WHERE MS.SUB_STATUS = 'N'
      AND NOT EXISTS (
          SELECT 1
          FROM MEMBER_SUBSCRIPTION MS2
          WHERE MS2.CUSTOMER_UID = MS.CUSTOMER_UID
            AND MS2.SUB_STATUS = 'Y'
            AND MS2.SUB_START_DT = MS.SUB_START_DT
            AND MS2.MS_ID > MS.MS_ID
      )
    GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
) ChurnAmount ON M.STAT_MONTH = ChurnAmount.MONTH

-- 5. 다운그레이드 감소액
LEFT JOIN (
    SELECT
        TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
        SUM(S1.SUB_PRICE - S2.SUB_PRICE) AS DOWNGRADE_AMOUNT
    FROM MEMBER_SUBSCRIPTION MS
    JOIN SUBSCRIBE S1 ON S1.SUB_ID = MS.SUB_ID
    JOIN MEMBER_SUBSCRIPTION MS2 ON
        MS.CUSTOMER_UID = MS2.CUSTOMER_UID AND
        MS2.SUB_STATUS = 'Y' AND
        MS2.SUB_START_DT = MS.SUB_START_DT AND
        MS2.MS_ID > MS.MS_ID
    JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
    WHERE MS.SUB_STATUS = 'N' AND
          S2.SUB_PRICE < S1.SUB_PRICE
    GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
) DowngradeAmount ON M.STAT_MONTH = DowngradeAmount.MONTH

-- 6. 총 구독 금액
LEFT JOIN(
    SELECT
      TO_CHAR(PAY_DATE, 'YYYY.MM') AS MONTH,
      SUM(PAY_AMOUNT) AS TOTAL_AMOUNT
    FROM
      PAYMENT
    GROUP BY
      TO_CHAR(PAY_DATE, 'YYYY.MM')
) TotalAmount ON M.STAT_MONTH = TotalAmount.MONTH

ORDER BY M.STAT_MONTH;

//////////////////////////////

--현재 달의 일별 총이득 금액과 총손실금액 그리고 총 구독금액
SELECT
    M.STAT_DAYS AS "통계_일",

    -- 총 이득 금액 = 신규 결제 금액 + 업그레이드 순증가액
    NVL(NewUserRevenue.NEW_SUBSCRIB_PAY, 0) +
    NVL(UpgradeRevenue.UPGRADE_AMOUNT, 0) AS "신규_및_업그레이드_금액",

    -- 총 손실 금액 = 순수 취소 금액 + 다운그레이드 순감소액
    NVL(ChurnAmount.CANCEL_AMOUNT, 0) +
    NVL(DowngradeAmount.DOWNGRADE_AMOUNT, 0) AS "취소_및_다운그레이드_금액",
    
    -- 총 구독 금액
    NVL(TotalAmount.TOTAL_AMOUNT, 0) AS "총_구독_금액"
FROM (
    -- 1. 통계용 기준 월 목록
    SELECT DISTINCT TO_CHAR(DT, 'YYYY.MM.DD') AS STAT_DAYS
    FROM (
        SELECT DISTINCT PAY_DATE AS DT
        FROM PAYMENT
        WHERE PAY_DATE BETWEEN TRUNC(SYSDATE, 'MM') 
                      AND LAST_DAY(SYSDATE)
    )
) M

-- 2. 신규 구독 결제 금액
LEFT JOIN (
    SELECT
        TO_CHAR(P.PAY_DATE, 'YYYY.MM.DD') AS DAYS,
        SUM(P.PAY_AMOUNT) AS NEW_SUBSCRIB_PAY
    FROM PAYMENT P
    JOIN MEMBER_SUBSCRIPTION MS ON MS.MS_ID = P.MS_ID
    WHERE P.PAY_DATE = (
        SELECT MIN(P2.PAY_DATE)
        FROM PAYMENT P2
        JOIN MEMBER_SUBSCRIPTION MS2 ON MS2.MS_ID = P2.MS_ID
        WHERE MS2.MEM_ID = MS.MEM_ID
    )
    GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM.DD')
) NewUserRevenue ON M.STAT_DAYS = NewUserRevenue.DAYS

-- 3. 업그레이드 결제 증가액
LEFT JOIN (
    SELECT
        TO_CHAR(MS.SUB_END_DT, 'YYYY.MM.DD') AS DAYS,
        SUM(S2.SUB_PRICE - S1.SUB_PRICE) AS UPGRADE_AMOUNT
    FROM MEMBER_SUBSCRIPTION MS
    JOIN SUBSCRIBE S1 ON S1.SUB_ID = MS.SUB_ID
    JOIN MEMBER_SUBSCRIPTION MS2 ON
        MS.CUSTOMER_UID = MS2.CUSTOMER_UID AND
        MS2.SUB_STATUS = 'Y' AND
        MS2.SUB_START_DT = MS.SUB_START_DT AND
        MS2.MS_ID > MS.MS_ID
    JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
    WHERE MS.SUB_STATUS = 'N' AND
          S2.SUB_PRICE > S1.SUB_PRICE
    GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM.DD')
) UpgradeRevenue ON M.STAT_DAYS = UpgradeRevenue.DAYS

-- 4. 순수 취소 금액
LEFT JOIN (
    SELECT
        TO_CHAR(MS.SUB_END_DT, 'YYYY.MM.DD') AS DAYS,
        SUM(S.SUB_PRICE) AS CANCEL_AMOUNT
    FROM MEMBER_SUBSCRIPTION MS
    JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
    WHERE MS.SUB_STATUS = 'N'
      AND NOT EXISTS (
          SELECT 1
          FROM MEMBER_SUBSCRIPTION MS2
          WHERE MS2.CUSTOMER_UID = MS.CUSTOMER_UID
            AND MS2.SUB_STATUS = 'Y'
            AND MS2.SUB_START_DT = MS.SUB_START_DT
            AND MS2.MS_ID > MS.MS_ID
      )
    GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM.DD')
) ChurnAmount ON M.STAT_DAYS = ChurnAmount.DAYS

-- 5. 다운그레이드 감소액
LEFT JOIN (
    SELECT
        TO_CHAR(MS.SUB_END_DT, 'YYYY.MM.DD') AS DAYS,
        SUM(S1.SUB_PRICE - S2.SUB_PRICE) AS DOWNGRADE_AMOUNT
    FROM MEMBER_SUBSCRIPTION MS
    JOIN SUBSCRIBE S1 ON S1.SUB_ID = MS.SUB_ID
    JOIN MEMBER_SUBSCRIPTION MS2 ON
        MS.CUSTOMER_UID = MS2.CUSTOMER_UID AND
        MS2.SUB_STATUS = 'Y' AND
        MS2.SUB_START_DT = MS.SUB_START_DT AND
        MS2.MS_ID > MS.MS_ID
    JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
    WHERE MS.SUB_STATUS = 'N' AND
          S2.SUB_PRICE < S1.SUB_PRICE
    GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM.DD')
) DowngradeAmount ON M.STAT_DAYS = DowngradeAmount.DAYS

-- 6. 총 구독 금액
LEFT JOIN(
    SELECT
      TO_CHAR(PAY_DATE, 'YYYY.MM.DD') AS DAYS,
      SUM(PAY_AMOUNT) AS TOTAL_AMOUNT
    FROM
      PAYMENT
    GROUP BY
      TO_CHAR(PAY_DATE, 'YYYY.MM.DD')
) TotalAmount ON M.STAT_DAYS = TotalAmount.DAYS

ORDER BY M.STAT_DAYS;


SELECT
    TO_CHAR(l.PL_CREATED_AT, 'YYYY-MM-DD') AS "dt",
    
    -- '나의 활동 - 이력서' 로그 카운트
    COUNT(CASE WHEN l.PL_TITLE = '이력서AI요청' THEN 1 END) AS "resumeCnt",
    
    -- '나의 활동 - 자기소개서' 로그 카운트
    COUNT(CASE WHEN l.PL_TITLE = '자기소개서AI요청' THEN 1 END) AS "coverCnt"
    
    -- 참고: 모의면접 로그가 있다면 여기에 추가
    -- COUNT(CASE WHEN l.PL_TITLE = '모의면접AI요청' THEN 1 END) AS "mockCnt"
    
FROM PAGE_LOG l
JOIN MEMBER m ON l.MEM_ID = m.MEM_ID
WHERE 
    l.PL_TITLE IN ('이력서AI요청', '자기소개서AI요청' ,'모의면접AI요청')
    AND l.PL_CREATED_AT >= TO_DATE('2025-08-01', 'YYYY-MM-DD')
    AND l.PL_CREATED_AT < TO_DATE('2025-08-31', 'YYYY-MM-DD') + 1
GROUP BY 
    TO_CHAR(l.PL_CREATED_AT, 'YYYY-MM-DD')
ORDER BY "dt" ASC;