--상품별 월별 결제 구독수
SELECT
  TO_CHAR(P.PAY_DATE, 'YYYY.MM') AS MONTH,
  S.SUB_NAME,
  COUNT(*) AS NEW_SUBSCRIBER_COUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN PAYMENT P ON P.MS_ID = MS.MS_ID
JOIN SUBSCRIBE S ON S.SUB_ID= MS.SUB_ID
GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM'),
      S.SUB_NAME
ORDER BY MONTH;

---- 월별 총구독자 수
SELECT
  TO_CHAR(P.PAY_DATE, 'YYYY.MM') AS MONTH,
  COUNT(*) AS NEW_SUBSCRIBER_COUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN PAYMENT P ON P.MS_ID = MS.MS_ID
GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM')
ORDER BY MONTH;


-- 월별 총 결제금
SELECT
  TO_CHAR(PAY_DATE, 'YYYY.MM') AS MONTH,
  SUM(PAY_AMOUNT) AS TOTAL_AMOUNT
FROM
  PAYMENT
GROUP BY
  TO_CHAR(PAY_DATE, 'YYYY.MM')
ORDER BY
  MONTH;
  
  
-- 월별 신규 구독자 수
SELECT
  TO_CHAR(P.PAY_DATE, 'YYYY.MM') AS MONTH,
  COUNT(*) AS NEW_PAYING_USERS
FROM PAYMENT P
WHERE P.PAY_DATE = (
  SELECT MIN(P2.PAY_DATE)
  FROM PAYMENT P2
  JOIN MEMBER_SUBSCRIPTION MS2 ON P2.MS_ID = MS2.MS_ID
  WHERE MS2.MEM_ID = (
    SELECT MS3.MEM_ID
    FROM MEMBER_SUBSCRIPTION MS3
    WHERE MS3.MS_ID = P.MS_ID
  )
)
GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM')
ORDER BY MONTH;

--월별 신규 가입결제
SELECT
  TO_CHAR(P.PAY_DATE, 'YYYY.MM') AS MONTH,
  SUM(P.PAY_AMOUNT) AS NEW_SUBSCRIB_PAY
FROM PAYMENT P
WHERE P.PAY_DATE = (
  SELECT MIN(P2.PAY_DATE)
  FROM PAYMENT P2
  JOIN MEMBER_SUBSCRIPTION MS2 ON P2.MS_ID = MS2.MS_ID
  WHERE MS2.MEM_ID = (
    SELECT MS3.MEM_ID
    FROM MEMBER_SUBSCRIPTION MS3
    WHERE MS3.MS_ID = P.MS_ID
  )
)
GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM')
ORDER BY MONTH;
  

--월별 취소
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  COUNT(*) AS CANCEL_COUNT
FROM MEMBER_SUBSCRIPTION MS
WHERE SUB_STATUS = 'N'
AND NOT EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;



--월별 취소 금액
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  SUM(S.SUB_PRICE) AS CANCEL_AMOUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
WHERE SUB_STATUS = 'N'
AND NOT EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;

--월별 구독 변화수
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  COUNT(*) AS CANCEL_COUNT
FROM MEMBER_SUBSCRIPTION MS
WHERE SUB_STATUS = 'N'
AND EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;

--월별 업그레이드 수
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  COUNT(*) AS UPGRAD_COUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
WHERE SUB_STATUS = 'N'
AND EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
    AND S2.SUB_PRICE>S.SUB_PRICE
)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;

--월별 업그레이드 결제금액
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  SUM(S2.SUB_PRICE - S.SUB_PRICE) AS UPGRAD_AMOUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
WHERE SUB_STATUS = 'N'
AND EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
    AND S2.SUB_PRICE>S.SUB_PRICE
)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;

--월별 다운그레이드 수
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  COUNT(*) AS DOWNGRAD_COUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
WHERE SUB_STATUS = 'N'
AND EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
    AND S2.SUB_PRICE<S.SUB_PRICE
)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;

--월별 다운레이드 결제금액
SELECT
  TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
  SUM(S.SUB_PRICE-S2.SUB_PRICE) AS DOWNGRAD_AMOUNT
FROM MEMBER_SUBSCRIPTION MS
JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
WHERE SUB_STATUS = 'N'
AND EXISTS(
    SELECT 1
    FROM MEMBER_SUBSCRIPTION MS2
    JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
    WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID
    AND MS2.SUB_STATUS = 'Y'
    AND MS2.SUB_START_DT = MS.SUB_START_DT
    AND MS2.MS_ID>MS.MS_ID
    AND S2.SUB_PRICE<S.SUB_PRICE
)
GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
ORDER BY MONTH;


--월별 총이득 금액과 총손실금액
SELECT
    M.STAT_MONTH AS "통계_월",
    -- 총 이득 금액 = (신규 가입 결제액) + (업그레이드 순증가액)
    (NVL(NewUserRevenue.NEW_SUBSCRIB_PAY, 0) + NVL(UpgradeRevenue.UPGRAD_AMOUNT, 0)) AS "총_이득_금액",
    
    -- 총 손실 금액 = (순수 취소 금액) + (다운그레이드 순감소액)
    (NVL(ChurnAmount.CANCEL_AMOUNT, 0) + NVL(DowngradeAmount.DOWNGRAD_AMOUNT, 0)) AS "총_손실_금액"
FROM
    -- 1. 통계의 기준이 될 모든 월 목록을 생성
    (SELECT DISTINCT TO_CHAR(DT, 'YYYY.MM') AS STAT_MONTH
     FROM (
         SELECT PAY_DATE AS DT FROM PAYMENT
         UNION
         SELECT SUB_END_DT AS DT FROM MEMBER_SUBSCRIPTION
     )) M
LEFT JOIN
    -- 2. 월별 신규 가입 결제액
    (SELECT
       TO_CHAR(P.PAY_DATE, 'YYYY.MM') AS MONTH,
       SUM(P.PAY_AMOUNT) AS NEW_SUBSCRIB_PAY
     FROM PAYMENT P
     WHERE P.PAY_DATE = (
       SELECT MIN(P2.PAY_DATE) FROM PAYMENT P2
       JOIN MEMBER_SUBSCRIPTION MS2 ON P2.MS_ID = MS2.MS_ID
       WHERE MS2.MEM_ID = (SELECT MS3.MEM_ID FROM MEMBER_SUBSCRIPTION MS3 WHERE MS3.MS_ID = P.MS_ID)
     )
     GROUP BY TO_CHAR(P.PAY_DATE, 'YYYY.MM')
    ) NewUserRevenue ON M.STAT_MONTH = NewUserRevenue.MONTH
LEFT JOIN
    -- 3. 월별 업그레이드 순증가액
    (SELECT
       TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
       SUM(S2.SUB_PRICE - S.SUB_PRICE) AS UPGRAD_AMOUNT
     FROM MEMBER_SUBSCRIPTION MS JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
     WHERE SUB_STATUS = 'N' AND EXISTS(
       SELECT 1 FROM MEMBER_SUBSCRIPTION MS2 JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
       WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID AND MS2.SUB_STATUS = 'Y' AND MS2.SUB_START_DT = MS.SUB_START_DT AND MS2.MS_ID > MS.MS_ID AND S2.SUB_PRICE > S.SUB_PRICE
     )
     GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
    ) UpgradeRevenue ON M.STAT_MONTH = UpgradeRevenue.MONTH
LEFT JOIN
    -- 4. 월별 순수 취소 금액
    (SELECT
       TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
       SUM(S.SUB_PRICE) AS CANCEL_AMOUNT
     FROM MEMBER_SUBSCRIPTION MS JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
     WHERE SUB_STATUS = 'N' AND NOT EXISTS(
       SELECT 1 FROM MEMBER_SUBSCRIPTION MS2
       WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID AND MS2.SUB_STATUS = 'Y' AND MS2.SUB_START_DT = MS.SUB_START_DT AND MS2.MS_ID > MS.MS_ID
     )
     GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
    ) ChurnAmount ON M.STAT_MONTH = ChurnAmount.MONTH
LEFT JOIN
    -- 5. 월별 다운그레이드 순감소액
    (SELECT
       TO_CHAR(MS.SUB_END_DT, 'YYYY.MM') AS MONTH,
       SUM(S.SUB_PRICE - S2.SUB_PRICE) AS DOWNGRAD_AMOUNT
     FROM MEMBER_SUBSCRIPTION MS JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
     WHERE SUB_STATUS = 'N' AND EXISTS(
       SELECT 1 FROM MEMBER_SUBSCRIPTION MS2 JOIN SUBSCRIBE S2 ON S2.SUB_ID = MS2.SUB_ID
       WHERE MS.CUSTOMER_UID = MS2.CUSTOMER_UID AND MS2.SUB_STATUS = 'Y' AND MS2.SUB_START_DT = MS.SUB_START_DT AND MS2.MS_ID > MS.MS_ID AND S2.SUB_PRICE < S.SUB_PRICE
     )
     GROUP BY TO_CHAR(MS.SUB_END_DT, 'YYYY.MM')
    ) DowngradeAmount ON M.STAT_MONTH = DowngradeAmount.MONTH
ORDER BY
    M.STAT_MONTH;