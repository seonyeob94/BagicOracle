--카멜케이스 생성

SELECT COLUMN_NAME
, DATA_TYPE
, CASE WHEN DATA_TYPE='NUMBER' THEN 'private int ' || FN_GETCAMEL(COLUMN_NAME) || ';'
WHEN DATA_TYPE IN('VARCHAR2','CHAR') THEN 'private String ' || FN_GETCAMEL(COLUMN_NAME) || ';'
WHEN DATA_TYPE='DATE' THEN 'private Date ' || FN_GETCAMEL(COLUMN_NAME) || ';'
ELSE 'private String ' || FN_GETCAMEL(COLUMN_NAME) || ';'
END AS CAMEL_CASE
, '<result property="'||FN_GETCAMEL(COLUMN_NAME)||'" column="'||COLUMN_NAME||'"/>' RESULTMAP
, '#{' || FN_GETCAMEL(COLUMN_NAME) || '},'
FROM ALL_TAB_COLUMNS
WHERE TABLE_NAME = 'MEMBER'
AND    OWNER = 'JSPEXAM';



SELECT * FROM BOOK WHERE BOOK_ID =5;


		MERGE INTO BOOK A
		USING DUAL ON(A.BOOK_ID = #{bookId})
		WHEN MATCHED THEN
		    UPDATE 
		    SET    TITLE=#{title},CATEGORY=#{category},PRICE=#{price}
		    WHERE  BOOK_ID = #{bookId}
		WHEN NOT MATCHED THEN
		    INSERT (BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE)
		    VALUES(
				(SELECT NVL(MAX(BOOK_ID),0)+1 FROM BOOK)
			,#{title},#{category},#{price},SYSDATE)
            
            ROLLBACK;
            commit;
            
DELETE  FROM BOOK
WHERE   BOOK_ID= 3

SELECT BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE
FROM BOOK
ORDER BY BOOK_ID DESC;

map{category=소설}
SELECT BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE
FROM   BOOK
WHERE  1 = 1
<if test="title!=null and title!=''>
AND  TITLE LIKE #{title}
</if>
AND    INSERT_DATE < SYSDATE
;

/
declare
    V_BOOK_ID NUMBER;
begin
    --PL/SQL에서는 SELECT와 INTO 항상 함께 사용됨
    SELECT  NVL(MAX(BOOK_ID),0) INTO V_BOOK_ID
    FROM    BOOK;
    --자동 선언 정수형 변수
    FOR I IN 1..272 LOOP
        INSERT INTO BOOK(BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE)
        VALUES(V_BOOK_ID+I,'개똥이의 모험'||I,'즐거운 모험'||I,12000+I,SYSDATE);
    END LOOP;
    COMMIT;
end;
/
SELECT * FROM BOOK;

--jspexam계정에 lprod테이블 생성(복제해 옴)
create table lprod
as
select *from sy94.lprod;

SELECT COLUMN_NAME
, DATA_TYPE
, CASE WHEN DATA_TYPE='NUMBER' THEN 'private int ' || FN_GETCAMEL(COLUMN_NAME) || ';'
WHEN DATA_TYPE IN('VARCHAR2','CHAR') THEN 'private String ' || FN_GETCAMEL(COLUMN_NAME) || ';'
WHEN DATA_TYPE='DATE' THEN 'private Date ' || FN_GETCAMEL(COLUMN_NAME) || ';'
ELSE 'private String ' || FN_GETCAMEL(COLUMN_NAME) || ';'
END AS CAMEL_CASE
, '<result property="'||FN_GETCAMEL(COLUMN_NAME)||'" column="'||COLUMN_NAME||'"/>' RESULTMAP
FROM ALL_TAB_COLUMNS
WHERE TABLE_NAME = 'LPROD'
AND    OWNER = 'JSPEXAM';


--PL/SQL : Procedual(절차적) Language(언어)
--SQL : Structed(구조화된) Query(질의) Language(언어)

/
DECLARE
    V_LPROD_ID NUMBER;
BEGIN
    SELECT NVL(MAX(LPROD_ID),0) INTO V_LPROD_ID
    FROM LPROD;
    
    --I : 자동 선언 정수형 변수
    FOR I IN 1..272 LOOP
        INSERT INTO LPROD(LPROD_ID, LPROD_GU, LPROD_NM)
        VALUES(V_LPROD_ID +I, 
        'P'|| TRIM(TO_CHAR(700+I,'000')),
        '개똥이'||I);
    END LOOP;
    COMMIT;
END;

/

SELECT* FROM LPROD


    SELECT LPROD_ID, LPROD_GU, LPROD_NM
    FROM   LPROD
    WHERE  1 = 1

--LPROD_ID로 정렬 후에 ROWNM을 하고 싶다면
  SELECT ROWNUM, LPROD_ID, LPROD_GU, LPROD_NM
  FROM   LPROD
  WHERE  1 = 1
  ORDER BY LPROD_ID;
--서브쿼리
/*
SCALAR서브쿼리 : SELECT 절
NESTED서브쿼리 : WHERE 절
INLINE VIEW : FROM 절
*/
SELECT T.LPROD_ID, T.LPROD_GU, T.LPROD_NM
FROM
(
    SELECT LPROD_ID, LPROD_GU, LPROD_NM
    FROM   LPROD
    WHERE  1 = 1
    ORDER BY LPROD_ID
) T;

SELECT ROW_NUMBER() OVER(ORDER BY LPROD_ID)
        , LPROD_ID, LPROD_GU, LPROD_NM
  FROM   LPROD
  WHERE  1 = 1
;

--분석함수
WITH T AS(
SELECT ROW_NUMBER() OVER(ORDER BY LPROD_ID) RNUM
     , LPROD_ID, LPROD_GU, LPROD_NM
FROM   LPROD
WHERE  1 = 1
)
SELECT * FROM T
WHERE T.RNUM BETWEEN (1*10)-(10-1) AND (1*10);

--집계함수 : SUM, AVG, MIN, MAX, COUNT
SELECT COUNT(*)
FROM   LPROD
WHERE  1 = 1

--부모테이블의 기본키가 자식테이블의 외래키로 전이되고
--자식테이블의 외래키가 부모테이블의 기본키를 참조한다
--AUTHENTICATION : 인증(로그인)
--사용자
CREATE TABLE USERS(
    USERNAME  VARCHAR2(50),
    NAME      VARCHAR2(150),
    PASSWORD VARCHAR2(100),
    ENABLED VARCHAR2(1),
    CONSTRAINT PK_USERS PRIMARY KEY(USERNAME)
);

--AUTHORIZATION : 인가(권한)
CREATE TABLE AUTHORITIES(
    USERNAME  VARCHAR2(50),
    AUTHORITY VARCHAR2(50),
    CONSTRAINT PK_AUTHO PRIMARY KEY(USERNAME, AUTHORITY),
    CONSTRAINT FK_AUTHO FOREIGN KEY(USERNAME) REFERENCES USERS(USERNAME)
);

INSERT INTO USERS(USERNAME,NAME, PASSWORD, ENABLED) VALUES('user','김은대','java','1');
INSERT INTO USERS(USERNAME,NAME, PASSWORD, ENABLED) VALUES('member','이쁘니','java','1');
INSERT INTO USERS(USERNAME,NAME, PASSWORD, ENABLED) VALUES('admin','신용환','java','1');

INSERT INTO AUTHORITIES(USERNAME, AUTHORITY) VALUES('user','ROLE_USER');
INSERT INTO AUTHORITIES(USERNAME, AUTHORITY) VALUES('member','ROLE_MEMBER');
INSERT INTO AUTHORITIES(USERNAME, AUTHORITY) VALUES('admin','ROLE_MEMBER');
INSERT INTO AUTHORITIES(USERNAME, AUTHORITY) VALUES('admin','ROLE_ADMIN');

COMMIT;
ROLLBACK;

/
--1. 오라클 EQUI JOIN
SELECT  A.USERNAME, A.NAME, A.PASSWORD, A.ENABLED
       ,B.USERNAME, B.AUTHORITY
FROM    USERS A, AUTHORITIES B
WHERE  A.USERNAME = B.USERNAME;

--2. ANSI표준(INNER JOIN)
SELECT A.USERNAME, A.NAME, A.PASSWORD, A.ENABLED
     , B.USERNAME, B.AUTHORITY
FROM  USERS A
JOIN AUTHORITIES B ON A.USERNAME=B.USERNAME
ORDER BY 1;


--코드조각
SELECT COLUMN_NAME
, DATA_TYPE
, CASE WHEN DATA_TYPE='NUMBER' THEN 'private int ' || FN_GETCAMEL(COLUMN_NAME) || ';'
WHEN DATA_TYPE IN('VARCHAR2','CHAR') THEN 'private String ' || FN_GETCAMEL(COLUMN_NAME) || ';'
WHEN DATA_TYPE='DATE' THEN 'private Date ' || FN_GETCAMEL(COLUMN_NAME) || ';'
ELSE 'private String ' || FN_GETCAMEL(COLUMN_NAME) || ';'
END AS CAMEL_CASE
, '<result property="'||FN_GETCAMEL(COLUMN_NAME)||'" column="'||COLUMN_NAME||'"/>' RESULTMAP
FROM ALL_TAB_COLUMNS
WHERE TABLE_NAME = 'AUTHORITIES'
AND    OWNER = 'JSPEXAM';



CREATE TABLE PRODUCT(
    PRODUCT_ID VARCHAR2(20),
    PNAME VARCHAR2(150),
    UNIT_PRICE NUMBER,
    DESCRIPTION VARCHAR2(1000),
    MANUFACTURER VARCHAR2(300),
    CATEGORY VARCHAR2(150),
    UNITS_IN_STOCK NUMBER,
    CONDITION VARCHAR2(100),
    FILENAME VARCHAR2(300),
    QUANTITY NUMBER,
    CONSTRAINT PK_PRODUCT PRIMARY KEY(PRODUCT_ID)
);

------------------------------------------------------------------------

Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1234','iPhone 6s',800000,'4.7-inch, 1334x750 Renina HD display.8-megapixel iSight Camera','Apple','Smart Phone',1000,'New','P1234.jpg',0);
Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1235','LG PC 그램',1000000,'13.3-inch, IPS LED display, 5rd Generation Intel Core processors','LG','Notebook',1000,'Refurbished','P1235.jpg',0);
Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1236','Galaxy Tab S',900000,'212.8*125.6*6.6m, Super AMOLED display, Octa-Core processor','Samsung','Tablet',1000,'Old','P1236.jpg',0);
Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1237','애플핸드폰',10000,'애플핸드폰','애플핸드폰','애플핸드폰',0,'Old','P1237.jpg',null);
Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1238','삼성 폴더블폰',1000000,'삼성 폴더블폰 내용','samsung','핸드폰',15,'New',null,null);
Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1239','개똥이폰',1000000,'개똥이폰 좋아요','삼성','휴대폰',100,'New',null,null);
Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1240','개똥이폴더폰',1000000,'개똥이폴더폰 굿','애플','소설',15,'New',null,null);
Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1241','삼성노트북20',1000000,'삼성노트북20 설명글','samsung','노트북',100,'New',null,null);
Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1242','아이폰입니다2',1000000,'아이폰입니다233','애플','소설',15,'New',null,null);
Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1243','아이폰입니다3',1000000,'아이폰입니다35','애플','소설',15,'New',null,null);
Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1244','아이폰입니다',1000000,'아이폰입니다5','애플','수필',2000,'New',null,null);
Insert into PRODUCT (PRODUCT_ID,PNAME,UNIT_PRICE,DESCRIPTION,MANUFACTURER,CATEGORY,units_in_stock,CONDITION,FILENAME,QUANTITY) values ('P1245','에어팟3',15000,'<p>ㄴㅁㅇ</p>','Apple','Tablet',null,'Old',null,0);

-----------------------------------------------------------------------------------





SELECT SUBSTR(MAX(PRODUCT_ID),1,1)
    ||(SUBSTR(MAX(PRODUCT_ID),2,4)+1)
FROM PRODUCT;

INSERT INTO PRODUCT(PRODUCT_ID, PNAME, UNIT_PRICE, DESCRIPTION, MANUFACTURER, CATEGORY, UNITS_IN_STOCK, CONDITION)
        VALUES();



select * from product;

    
CREATE TABLE ITEM (
    ITEM_ID NUMBER,
    ITEM_NAME VARCHAR2(60),
    PRICE NUMBER,
    DESCRIPTION VARCHAR2(300),
    PICTURE_URL VARCHAR2(200),
    CONSTRAINT PK_ITEM PRIMARY KEY(ITEM_ID)
    );

--여러 개의 이미지 업로드 테이블
--제1정규형 위반(원자값)
CREATE TABLE ITEM2(
    ITEM_ID NUMBER,
    ITEM_NAME VARCHAR2(60),
    PRICE NUMBER,
    DESCRIPTION VARCHAR2(150),
    PICTURE_URL VARCHAR2(600),
    PICTURE_URL2 VARCHAR2(600),
    CONSTRAINT PK_ITEM2 PRIMARY KEY(ITEM_ID)
);

--PRODUCT 테이블에 FILENAME2 컬럼 추가
--ALTER : 구조변경(DDL Definition Language)
ALTER TABLE PRODUCT 
ADD FILENAME2 VARCHAR2(300);

--오락클에서 DDL은 자동 COMMIT 됨
--SQLSERVER 는 DDL이 자동 COMMIT 안됨



CREATE TABLE ATTACH(
    PRODUCT_ID VARCHAR2(20),
    SEQ     NUMBER,
    PICTURE_URL VARCHAR2(600),
    PICTURE_SIZE NUMBER,
    PICTURE_TYPE VARCHAR2(100),
    REG_DATE DATE,
    CONSTRAINT PK_ATTACH PRIMARY KEY(PRODUCT_ID, SEQ),
    CONSTRAINT FK_ATTACH FOREIGN KEY(PRODUCT_ID)
        REFERENCES PRODUCT(PRODUCT_ID)
);


SELECT A.PRODUCT_ID, A.PNAME, A.UNIT_PRICE, A.DESCRIPTION, A.MANUFACTURER
     , A.CATEGORY, A.UNITS_IN_STOCK, A.CONDITION, A.FILENAME, A.QUANTITY
     , A.FILENAME2
     , B.SEQ, B.PICTURE_URL, B.b vbPICTURE_SIZE, B.PICTURE_TYPE
     , B.REG_DATE
FROM   PRODUCT A, ATTACH B
WHERE  A.PRODUCT_ID = B.PRODUCT_ID
AND    A.PRODUCT_ID = 'P1256';      




-- 조인 구문 구성시
-- FROM 절 적은 행의 수 테이블, 많은 행의 수 테이블
-- WHERE 적은 행의 수 테이블 조건 걸기
-- AND 조인 조건



SELECT A.PRODUCT_ID, A.PNAME, A.UNIT_PRICE, A.DESCRIPTION, A.MANUFACTURER
     , A.CATEGORY, A.UNITS_IN_STOCK, A.CONDITION, A.FILENAME, A.QUANTITY
     , B.SEQ, B.PICTURE_URL, B.PICTURE_SIZE
     , B.PICTURE_TYPE, B.REG_DATE
FROM   PRODUCT A
LEFT OUTER JOIN   ATTACH B ON A.PRODUCT_ID = B.PRODUCT_ID
WHERE  A.PRODUCT_ID = 'P1256';






--관계 : RELATION
--데이터베이스 : DataBase
--RDB : 관계형 데이터베이스(공유, 저장, 통합, 운영)
--RDBMS : 관계형 데이터베이스 관리 시스템(오라클)
--FILE_GROUP
CREATE TABLE FILE_GROUP(
    FILE_GROUP_NO NUMBER,
    FILE_REGDATE  DATE,
    CONSTRAINT PK_FG PRIMARY KEY(FILE_GROUP_NO)
);

--FILE_DETAIL
CREATE TABLE FILE_DETAIL(
    FILE_SN NUMBER,        
    FILE_GROUP_NO NUMBER,   
    FILE_ORIGINAL_NAME VARCHAR2(300),
    FILE_SAVE_NAME VARCHAR2(300),
    FILE_SAVE_LOCATE VARCHAR2(300),
    FILE_SIZE NUMBER,  
    FILE_EXT VARCHAR2(30),
    FILE_MIME VARCHAR2(30),
    FILE_FANCYSIZE VARCHAR2(30),
    FILE_SAVE_DATE DATE,
    FILE_DOWNCOUNT NUMBER,
    CONSTRAINT PK_FD PRIMARY KEY(FILE_SN, FILE_GROUP_NO),
    CONSTRAINT FK_FD FOREIGN KEY(FILE_GROUP_NO)
                     REFERENCES FILE_GROUP(FILE_GROUP_NO)
);




--20250618001
--SUBSTR(MAX(FILE_GROUP_NO),-3)+1 : 002(X) / 1(O) 
--TO_CHAR(SUBSTR(MAX(FILE_GROUP_NO),-3)+1, '000') : 002
SELECT  NVL(SUBSTR(MAX(FILE_GROUP_NO),1,8)
        ||TRIM(TO_CHAR(SUBSTR(MAX(FILE_GROUP_NO),-3)+1, '000'))
        ,TO_CHAR(SYSDATE, 'YYYYMMDD"001"')) AS RSLT
FROM    FILE_GROUP
WHERE   SUBSTR(FILE_GROUP_NO,1,8) = TO_CHAR(SYSDATE,'YYYYMMDD');

--문자형변환함수(20250618)
SELECT  TO_CHAR(SYSDATE,'YYYYMMDD') 
FROM    DUAL;


--FILE_DETAIL 테이블의 마지막 FILE_SN 값 +1 구하기
--단, FILE_SN는 주어진 FILE_GROUP_NO의 값을 조건으로 하기
--단, FILE_SN의 값이 NULL이면 NULL처리하기
--파일을 업로드 했고, 오늘 첫번째 그룹으로써 업로드함
--상세 테이블에는 3개의 파일이 있더라

SELECT NVL(MAX(D.FILE_SN),0)+1
FROM FILE_DETAIL D
JOIN FILE_GROUP G ON G.FILE_GROUP_NO=D.FILE_GROUP_NO


SELECT NVL(MAX(FILE_SN),0)+1
FROM FILE_DETAIL
WHERE FILE_GROUP_NO='20250619001'






















