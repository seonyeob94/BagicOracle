20250703-

--카멜케이스 생성

SELECT COLUMN_NAME
, DATA_TYPE
, CASE WHEN DATA_TYPE='NUMBER' THEN 'private int ' || FN_GETCAMEL(COLUMN_NAME) || ';'
WHEN DATA_TYPE IN('VARCHAR2','CHAR') THEN 'private String ' || FN_GETCAMEL(COLUMN_NAME) || ';'
WHEN DATA_TYPE='DATE' THEN 'private Date ' || FN_GETCAMEL(COLUMN_NAME) || ';'
ELSE 'private String ' || FN_GETCAMEL(COLUMN_NAME) || ';'
END AS CAMEL_CASE
, '<result property="'||FN_GETCAMEL(COLUMN_NAME)||'" column="'||COLUMN_NAME||'"/>' RESULTMAP
, '#{' || FN_GETCAMEL(COLUMN_NAME) || '},'
FROM ALL_TAB_COLUMNS
WHERE TABLE_NAME = 'HIGH_SCHOOL'
AND    OWNER = 'JSPEXAM';


/

SELECT A.NUM
     , A.TITLE
     , A.WRITER
     , (SELECT B.NAME FROM TBL_USERS B WHERE B.EMAIL = A.WRITER) NAME
     , (
            SELECT C.FILE_SAVE_LOCATE FROM FILE_DETAIL C 
            WHERE  C.FILE_GROUP_NO = (
                    SELECT D.FILE_GROUP_NO FROM TBL_USERS D WHERE D.EMAIL = A.WRITER
                )
        ) FILE_SAVE_LOCATE
     , PARENT_NUM
FROM   TEST_BOARD A
WHERE NUM = 11

;

SELECT A.NUM
     , LPAD('ㄴ',2*(LEVEL-1)) || TITLE
     , A.WRITER
     , (SELECT B.NAME FROM TBL_USERS B WHERE B.EMAIL = A.WRITER) NAME
     , (
            SELECT C.FILE_SAVE_LOCATE FROM FILE_DETAIL C 
            WHERE  C.FILE_GROUP_NO = (
                    SELECT D.FILE_GROUP_NO FROM TBL_USERS D WHERE D.EMAIL = A.WRITER
                )
        ) FILE_SAVE_LOCATE
     , PARENT_NUM, LEVEL
FROM   TEST_BOARD A
START WITH A.PARENT_NUM IS NULL AND NUM = 11
CONNECT BY PRIOR A.NUM = A.PARENT_NUM
;

--DD(정의)L : ALTER / CEREATE / DROP
--ALTER 옵션 : ADD / MODIFY / DROP
ALTER TABLE TEST_BOARD
ADD LIKE_CNT NUMBER;

--구조 확인
DESC TEST_BOARD;


/

CREATE TABLE MEMBER (
    SEQ     NUMBER(10)      NOT NULL,    -- 회원 일련번호 (PK)
    MEM_ID      VARCHAR2(20)    PRIMARY KEY, -- 회원 ID (고유하며 NULL 불가)
    MEM_NAME    VARCHAR2(50)    NOT NULL,       -- 회원 이름
    MEM_PHONE   VARCHAR2(20),                   -- 회원 전화번호 (선택 사항)
    MEM_LOC     VARCHAR2(100)                   -- 회원 거주 지역 (선택 사항)
);
    
DROP TABLE CAR;

CREATE TABLE CAR (
    SEQ         NUMBER(10)      PRIMARY KEY,    -- 차량 일련번호 (PK)
    CAR_ID      VARCHAR2(10)    NOT NULL,       -- 차량 아이디
    MEM_ID      VARCHAR2(20)    NOT NULL,       -- 소유 회원 ID (FK)
    CAR_NM    VARCHAR2(50)      NOT NULL,       -- 차량 제조사/모델명
    CONSTRAINT FK_MEM_ID FOREIGN KEY (MEM_ID) REFERENCES MEMBER(MEM_ID)
);


    
/

SELECT A.ID, A.EMAIL, A.PASSWORD, A.CREATED_AT, A.UPDATED_AT
     , A.NAME
     , A.IMG_URL
     , (SELECT C.FILE_SAVE_LOCATE FROM FILE_DETAIL C WHERE C.FILE_GROUP_NO=A.FILE_GROUP_NO) IMG_URL
     , B.AUTH
     , A.FILE_GROUP_NO
FROM   TBL_USERS A INNER JOIN TBL_USERS_AUTH B
ON(A.EMAIL = B.EMAIL)
WHERE  A.EMAIL = 'test@test.com';

SELECT FILE_SAVE_LOCATE FROM FILE_DETAIL WHERE FILE_GROUP_NO=""

SELECT *
FROM BOOK
WHERE INSERT_DATE LIKE '2025/05%';

SELECT *
FROM TEST_BOARD;


///

SELECT S.MON || '월' MON
     , COUNT(EMPLOYEE_ID) CNT
FROM
(
    SELECT LEVEL MON
    FROM   DUAL C
    CONNECT BY LEVEL <= 12
) S LEFT OUTER JOIN
(
    SELECT A.EMPLOYEE_ID
         , TO_CHAR(HIRE_DATE,'MM')+0 MON
    FROM   EMP A
    WHERE  SUBSTR(A.HIRE_DATE,1,4) IN (2020,2021)
) T
ON(S.MON = T.MON)
GROUP BY S.MON
ORDER BY S.MON;

SELECT 
    HS.HS_ID
  , HS.HS_CODE AS "학교코드"
  , HS.HS_NAME AS "학교명"
  , REGION.CC_NAME AS "시도명" --코드
  , JURIS.CC_ETC AS "관할 교육청 코드" --코드
  , FOUND.CC_NAME AS "설립유형" --코드
  , HS.HS_ZIPCODE AS "우편번호"
  , HS.HS_ADDR AS "기본주소"
  , HS.HS_TEL AS "전화번호"
  , HS.HS_HOMEPAGE AS "홈페이지 URL"
  , COEDU.CC_NAME AS "남녀공학 구분" --코드
  , TYPE.CC_NAME AS "학교 종류" --코드
  , GENERAL.CC_NAME AS "일반계/전문계" --코드
  , HS.HS_FOUND_DATE AS "설립일자"
  , HS.HS_ANNIV_AT AS "개교기념일"
  , HS.HS_LAT AS "위도"
  , HS.HS_LOT AS "경도"
FROM 
    HIGH_SCHOOL HS
LEFT JOIN
    COM_CODE REGION  
    ON HS.HS_REGION_CODE = REGION.CC_ID 
    AND REGION.CL_CODE = 'G23' 
LEFT JOIN
    COM_CODE JURIS  
    ON HS.HS_JURIS_CODE = JURIS.CC_ID 
    AND JURIS.CL_CODE = 'G22' 
LEFT JOIN
    COM_CODE FOUND  
    ON HS.HS_FOUND_TYPE = FOUND.CC_ID 
    AND FOUND.CL_CODE = 'G21' 
LEFT JOIN
    COM_CODE COEDU  
    ON HS.HS_COEDU_TYPE = COEDU.CC_ID 
    AND COEDU.CL_CODE = 'G24' 
LEFT JOIN
    COM_CODE TYPE  
    ON HS.HS_TYPE_NAME = TYPE.CC_ID 
    AND TYPE.CL_CODE = 'G25' 
LEFT JOIN
    COM_CODE GENERAL  
    ON HS.HS_GENERAL_TYPE = GENERAL.CC_ID 
    AND GENERAL.CL_CODE = 'G26' 
    
    

--고등학교 학과 테이블 고등학교 수 : 499
SELECT COUNT(DISTINCT HS_ID)
FROM HIGH_SCHOOL_DEPT

--고등학교 학과 테이블 행수 : 2786
SELECT COUNT(*)
FROM HIGH_SCHOOL_DEPT

--고등학교 테이블 행수 : 2395
SELECT COUNT(HS_ID)
FROM HIGH_SCHOOL

/
SELECT HS_NAME, COUNT(*) AS CNT
FROM HIGH_SCHOOL
GROUP BY HS_NAME
HAVING COUNT(*)>1
ORDER BY 2 DESC;
/
SELECT
    HSD.HSD_ID,
    HSD.HS_ID,
    HS.HS_NAME AS 학교명,
    HSD.HSD_CODE,        -- 학과 코드 (G27으로 시작하는 CC_ID)
    CC_MAJOR.CC_NAME AS 학과명, -- 학과명 (COM_CODE에서 가져옴)
    HSD.HSD_TRACK_NAME AS HSD_TRACK_CODE, -- 계열 코드 (G31로 시작하는 CC_ID)
    CC_TRACK.CC_NAME AS 계열명 -- 계열명 (COM_CODE에서 가져옴)
FROM
    HIGH_SCHOOL_DEPT HSD
JOIN
    COM_CODE CC_MAJOR ON HSD.HSD_CODE = CC_MAJOR.CC_ID
JOIN
    COM_CODE CC_TRACK ON HSD.HSD_TRACK_NAME = CC_TRACK.CC_ID
JOIN
    HIGH_SCHOOL HS ON HS.HS_ID=HSD.HS_ID
ORDER BY
    HSD.HS_ID, CC_MAJOR.CC_NAME;
/

commit;

UPDATE COM_CODE
SET CREATED_BY = 'LSY',
    UPDATED_BY = 'LSY';
    
--CONTEST_SEQ 시퀀스 생성
CREATE SEQUENCE CONTEST_SEQ
   START WITH 1      -- 1부터 시작 (원하는 시작값으로 변경 가능)
   INCREMENT BY 1    -- 1씩 증가
   NOMAXVALUE        -- 최대값 없음
   NOCYCLE           -- 반복하지 않음
   CACHE 20;         -- 캐시 크기 (성능 향상, 기본값 20)
       
-- FILE_GROUP_SEQ 시퀀스 생성
CREATE SEQUENCE FILE_GROUP_SEQ
       START WITH 1         -- 1부터 시작 (시작값은 원하는 대로 변경 가능)
       INCREMENT BY 1       -- 1씩 증가
       NOMAXVALUE           -- 최대값 없음
       NOCYCLE              -- 반복하지 않음 (끝까지 가면 다시 시작하지 않음)
       CACHE 20;            -- 캐시 크기 (성능 향상을 위해, 기본값 20)

-- FILE_DETAIL_SEQ 시퀀스 생성
CREATE SEQUENCE FILE_DETAIL_SEQ
       START WITH 1
       INCREMENT BY 1
       NOMAXVALUE
       NOCYCLE
       CACHE 20;
-------------------------------------------------

DROP SEQUENCE PAYMENT_SEQ;
DROP SEQUENCE MEMBER_SUBSCRIPTION_SEQ;

-- PAYMENT_SEQ 시퀀스 생성
CREATE SEQUENCE PAYMENT_SEQ
       START WITH 860
       INCREMENT BY 1
       NOMAXVALUE
       NOCYCLE
       CACHE 20;

-- MEMBER_SUBSCRIPTION_SEQ 시퀀스 생성
CREATE SEQUENCE MEMBER_SUBSCRIPTION_SEQ
       START WITH 610
       INCREMENT BY 1
       NOMAXVALUE
       NOCYCLE
       CACHE 20;